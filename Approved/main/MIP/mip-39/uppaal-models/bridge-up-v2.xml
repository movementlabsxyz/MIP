<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// This models the case where the relayer crashes

clock timelock1;  // clock to measure timelock duration on L1
clock timelock2;  // clock to measure timelock duration on L2

clock time;

// the layers IDs 
const int L1 = 0;
const int L2 = 1;

// where the asset is 
const int Alice = 0 ;
const int L1Bridge = 1 ;

const int MaxDuration = 50;
// durations in hours
int[0, MaxDuration] initiatorTimeLockDuration; // = 48; //26; //13 ; // 27;
int[0, MaxDuration] counterPartyTimeLock; // = 24; // 10; //24;

// whether the relayer is down
bool down = false;
//--------------------------------------------
// max time for relayer to relay (L1 to L2 or L2 to L1)
int[0, MaxDuration] minRelayerDelay = 1; // = 11; 
int[0, MaxDuration] maxRelayerDelay; // = 11; 

//--------------------------------------------
// events that are relayed by the relayer
broadcast chan BridgeTransferCompleted[2];
broadcast chan BridgeTransferPending;
broadcast chan BridgeTransferLocked;

// State variables for the contracts

// Status of transfer on L1 
const int L1UNDEFINED = 0;
const int L1INITIALIZED = 1;
const int L1COMPLETED = 2;
const int L1REFUNDED = 3;

//--------------------------------------------
// L1 BridgeTransfer
struct {
  int[0, L1REFUNDED] status;
  int timelock;
} L1BridgeTransfer = { L1UNDEFINED, 0 };

// L1 state
struct {
  int[0,1] assetOwner; // the owner of the asset
} L1State = { Alice } ;

// status of the transfer on the MOVE side
const int L2UNDEFINED = 0;
const int L2PENDING_TX = 1;
const int L2COMPLETED = 2;
const int L2CANCELLED = 3;

//--------------------------------------------
// L2 Bridge details
struct  {
  int [0, L2CANCELLED] status;
  int timelock;
} L2BridgeDetails = { L2UNDEFINED, 0 };

// L2 state
struct {
    bool assetReceived;  // whether the asset has been received by the counterparty
} L2State = { false };



</declaration>
	<template>
		<name>NonDetDurations</name>
		<location id="id0" x="-790" y="-34">
			<committed/>
		</location>
		<location id="id1" x="-442" y="-34">
		</location>
		<init ref="id0"/>
		<transition id="id2">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="-722" y="-153">i : int[0,MaxDuration], 
j: int[0, MaxDuration], 
k: int[0, MaxDuration]</label>
			<label kind="guard" x="-688" y="-68">i &gt; j + 2 * k</label>
			<label kind="assignment" x="-739" y="-25">initiatorTimeLockDuration = i,
counterPartyTimeLock = j,
maxRelayerDelay = k</label>
			<label kind="comments" x="-748" y="-246">Pick random values between 0 
and MaxDuration and assign
them to timelocks, and relayer 
latency</label>
		</transition>
	</template>
	<template>
		<name>InitiateTransfer</name>
		<declaration>
// Clock to constrain relayer latency/liveness
clock x;

// Initiate bridge transfer on L1
void init_bridge_transfer() {
    L1State.assetOwner = L1Bridge;
    L1BridgeTransfer.status = L1INITIALIZED;
    L1BridgeTransfer.timelock = initiatorTimeLockDuration;
}

// we reset timelock1 at time block.timestamp()
/* AtomicBridgeInitiatorMove.sol
function initiateBridgeTransfer(uint256 moveAmount, bytes32 recipient, bytes32 hashLock)
        external
        returns (bytes32 bridgeTransferId)
        {
        address originator = msg.sender;

        // Ensure there is a valid amount
        if (moveAmount == 0) {
            revert ZeroAmount();
        }

        // Transfer the MOVE tokens from the user to the contract
        if (!moveToken.transferFrom(originator, address(this), moveAmount)) {
            revert MOVETransferFailed();
        }

        // Update the pool balance
        poolBalance += moveAmount;

        // Generate a unique nonce to prevent replay attacks, and generate a transfer ID
        bridgeTransferId = keccak256(abi.encodePacked(originator, recipient, hashLock, initiatorTimeLockDuration, block.timestamp, nonce++));

        bridgeTransfers[bridgeTransferId] = BridgeTransfer({
            amount: moveAmount,
            originator: originator,
            recipient: recipient,
            hashLock: hashLock,
            timeLock: block.timestamp + initiatorTimeLockDuration,
            state: MessageState.INITIALIZED
        });

        emit BridgeTransferInitiated(bridgeTransferId, originator, recipient, moveAmount, hashLock, initiatorTimeLockDuration);
        return bridgeTransferId;
*/



// Lock_bridge_transfer_asset (Move)
void lock_bridge_transfer_asset() {
    L2BridgeDetails.status = L2PENDING_TX;
    L2BridgeDetails.timelock = counterPartyTimeLock;
}

/* Locks assets for a bridge transfer by the initiator.
///
/// @param caller The signer representing the bridge operator.
/// @param initiator The initiator's Ethereum address as a vector of bytes.
/// @param bridge_transfer_id The unique identifier for the bridge transfer.
/// @param hash_lock The hash lock for securing the transfer.
/// @param time_lock The time lock duration for the transfer.
/// @param recipient The address of the recipient on the Aptos blockchain.
/// @param amount The amount of assets to be locked.
/// @abort If the caller is not the bridge operator.
    public entry fun lock_bridge_transfer_assets(
        caller: &amp;signer,
        initiator: vector&lt;u8&gt;,
        bridge_transfer_id: vector&lt;u8&gt;,
        hash_lock: vector&lt;u8&gt;,
        recipient: address,
        amount: u64
    ) {
        atomic_bridge_configuration::assert_is_caller_operator(caller);
        let ethereum_address = ethereum::ethereum_address(initiator);
        let time_lock = atomic_bridge_store::create_time_lock(
            atomic_bridge_configuration::counterparty_timelock_duration());
        let details = atomic_bridge_store::create_details(
            ethereum_address,
            recipient,
            amount,
            hash_lock,
            time_lock
        );

        // bridge_store::add_counterparty(bridge_transfer_id, details);
        atomic_bridge_store::add(bridge_transfer_id, details);

        event::emit(
            BridgeTransferLockedEvent {
                bridge_transfer_id,
                initiator,
                recipient,
                amount,
                hash_lock,
                time_lock,
            },
        );
    }

/// Creates a time lock by adding a duration to the current time.
///
/// @param lock The duration to lock.
/// @return The calculated time lock.
/// @abort If lock is not above MIN_TIME_LOCK
    public(friend) fun create_time_lock(time_lock: u64) : u64 {
        assert_min_time_lock(time_lock);
        now() + time_lock
    }

/// Creates bridge transfer details with validation.
///
/// @param initiator The initiating party of the transfer.
/// @param recipient The receiving party of the transfer.
/// @param amount The amount to be transferred.
/// @param hash_lock The hash lock for the transfer.
/// @param time_lock The time lock for the transfer.
/// @return A `BridgeTransferDetails` object.
/// @abort If the amount is zero or locks are invalid.
    public(friend) fun create_details&lt;Initiator: store, Recipient: store&gt;(initiator: Initiator, recipient: Recipient, amount: u64, hash_lock: vector&lt;u8&gt;, time_lock: u64)
        : BridgeTransferDetails&lt;Initiator, Recipient&gt; {
        assert!(amount &gt; 0, EZERO_AMOUNT);
        assert_valid_hash_lock(&amp;hash_lock);
        time_lock = create_time_lock(time_lock);

        BridgeTransferDetails {
            addresses: AddressPair {
                initiator,
                recipient
            },
            amount,
            hash_lock,
            time_lock,
            state: PENDING_TRANSACTION,
        }
    }

/// Record details of a transfer
///
/// @param bridge_transfer_id Bridge transfer ID.
/// @param details The bridge transfer details
    public(friend) fun add&lt;Initiator: store, Recipient: store&gt;(bridge_transfer_id: vector&lt;u8&gt;, details: BridgeTransferDetails&lt;Initiator, Recipient&gt;) acquires SmartTableWrapper {
        assert!(features::abort_atomic_bridge_enabled(), EATOMIC_BRIDGE_NOT_ENABLED);

        assert_valid_bridge_transfer_id(&amp;bridge_transfer_id);
        let table = borrow_global_mut&lt;SmartTableWrapper&lt;vector&lt;u8&gt;, BridgeTransferDetails&lt;Initiator, Recipient&gt;&gt;&gt;(@aptos_framework);
        smart_table::add(&amp;mut table.inner, bridge_transfer_id, details);
    }

*/</declaration>
		<location id="id3" x="-2575" y="-1623">
			<label kind="comments" x="-2652" y="-1717">L1 user ready to 
initiate transfer</label>
		</location>
		<location id="id4" x="-2074" y="-1623">
			<name x="-2108" y="-1665">Relaying</name>
			<label kind="invariant" x="-2065" y="-1606">x &lt;= maxRelayerDelay</label>
		</location>
		<location id="id5" x="-1521" y="-1623">
			<name x="-1555" y="-1657">Locked</name>
			<label kind="comments" x="-1597" y="-1700">L1 transfer locked</label>
		</location>
		<location id="id6" x="-2074" y="-1462">
			<name x="-2133" y="-1479">Down</name>
		</location>
		<init ref="id3"/>
		<transition id="id7">
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="assignment" x="-2057" y="-1530">down = true</label>
		</transition>
		<transition id="id8">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-1861" y="-1572">BridgeTransferLocked!</label>
			<label kind="assignment" x="-1861" y="-1615">lock_bridge_transfer_asset(),
timelock2 = 0</label>
			<label kind="comments" x="-1980" y="-1700">Lock transfer asset on L2</label>
		</transition>
		<transition id="id9">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-2388" y="-1530">BridgeTransferPending!</label>
			<label kind="assignment" x="-2389" y="-1615">init_bridge_transfer(),
timelock1 = 0,
x = 0,
time = 0</label>
			<label kind="comments" x="-2456" y="-1793">User request L1 to L2 transfer
Emit BridgeTransferPending

We reset the clock measuring 
timelock1 at time block.timestamp()
 on L1.</label>
		</transition>
	</template>
	<template>
		<name>CompleteTransfer</name>
		<declaration>
// clock to constrain relayer latency/liveness
clock x;

// complete bridge transfer
void L2_complete_bridge_transfer() {
    L2BridgeDetails.status = L2COMPLETED;
    L2State.assetReceived = true;
}

/* Move: atomic_bridge_counterparty
/// Completes a bridge transfer by revealing the pre-image.
///
/// @param bridge_transfer_id The unique identifier for the bridge transfer.
/// @param pre_image The pre-image that matches the hash lock to complete the transfer.
/// @abort If the caller is not the bridge operator or the hash lock validation fails.
    public entry fun complete_bridge_transfer(
        bridge_transfer_id: vector&lt;u8&gt;,
        pre_image: vector&lt;u8&gt;,
    ) {
        let (recipient, amount) = atomic_bridge_store::complete_transfer&lt;EthereumAddress, address&gt;(
            bridge_transfer_id,
            create_hashlock(pre_image)
        );

        // Mint, fails silently
        atomic_bridge::mint(recipient, amount);

        event::emit(
            BridgeTransferCompletedEvent {
                bridge_transfer_id,
                pre_image,
            },
        );
    }

/// Completes a bridge transfer by validating the hash lock and updating the transfer state.
///
/// @param bridge_transfer_id The ID of the bridge transfer to complete.
/// @param hash_lock The hash lock used to validate the transfer.
/// @return A tuple containing the recipient of the transfer and the amount transferred.
/// @abort If the bridge transfer details are not found or if the completion checks in `complete_details` fail.
    public(friend) fun complete_transfer&lt;Initiator: store, Recipient: copy + store&gt;(bridge_transfer_id: vector&lt;u8&gt;, hash_lock: vector&lt;u8&gt;) : (Recipient, u64) acquires SmartTableWrapper {
        assert!(features::abort_atomic_bridge_enabled(), EATOMIC_BRIDGE_NOT_ENABLED);

        let table = borrow_global_mut&lt;SmartTableWrapper&lt;vector&lt;u8&gt;, BridgeTransferDetails&lt;Initiator, Recipient&gt;&gt;&gt;(@aptos_framework);

        let details = smart_table::borrow_mut(
            &amp;mut table.inner,
            bridge_transfer_id);

        complete_details&lt;Initiator, Recipient&gt;(hash_lock, details)
    }

/// Validates and completes a bridge transfer by confirming the hash lock and state.
///
/// @param hash_lock The hash lock used to validate the transfer.
/// @param details The mutable reference to the bridge transfer details to be completed.
/// @return A tuple containing the recipient and the amount of the transfer.
/// @abort If the hash lock is invalid, the transfer is not pending, or the hash lock does not match.
    fun complete_details&lt;Initiator: store, Recipient: store + copy&gt;(hash_lock: vector&lt;u8&gt;, details: &amp;mut BridgeTransferDetails&lt;Initiator, Recipient&gt;) : (Recipient, u64) {
        assert_valid_hash_lock(&amp;hash_lock);
        assert_pending(details);
        assert_correct_hash_lock(details, hash_lock);
        assert_within_timelock(details);

        complete(details);

        (details.addresses.recipient, details.amount)
    }

/// Asserts we are still within the timelock.
///
/// @param details The bridge transfer details.
/// @abort If the time lock has expired.
    fun assert_within_timelock&lt;Initiator: store, Recipient: store&gt;(details: &amp;BridgeTransferDetails&lt;Initiator, Recipient&gt;) {
        assert!(!(now() &gt; details.time_lock), EEXPIRED);
    }

/// Completes the bridge transfer.
///
/// @param details The bridge transfer details to complete.
    fun complete&lt;Initiator: store, Recipient: store&gt;(details: &amp;mut BridgeTransferDetails&lt;Initiator, Recipient&gt;) {
        details.state = COMPLETED_TRANSACTION;
    }
*/

void abort_bridge_transfer() {
    L2BridgeDetails.status = L2CANCELLED;
}
/*
public entry fun abort_bridge_transfer(
        caller: &amp;signer,
        bridge_transfer_id: vector&lt;u8&gt;
    ) {
        atomic_bridge_configuration::assert_is_caller_operator(caller);

        atomic_bridge_store::cancel_transfer&lt;EthereumAddress, address&gt;(bridge_transfer_id);

        event::emit(
            BridgeTransferCancelledEvent {
                bridge_transfer_id,
            },
        );
    }
*/

void L1_complete_bridge_transfer() {
    L1BridgeTransfer.status = L1COMPLETED;   
}

/* Solidity AtomicBridgeInitiator.sol
function completeBridgeTransfer(bytes32 bridgeTransferId, bytes32 preImage) external {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        if (bridgeTransfer.state != MessageState.INITIALIZED) revert BridgeTransferHasBeenCompleted();
        if (keccak256(abi.encodePacked(preImage)) != bridgeTransfer.hashLock) revert InvalidSecret();
        if (block.timestamp &gt; bridgeTransfer.timeLock) revert TimelockExpired();
        bridgeTransfer.state = MessageState.COMPLETED;

        emit BridgeTransferCompleted(bridgeTransferId, preImage);
    }
*/
</declaration>
		<location id="id10" x="-1003" y="-552">
			<label kind="invariant" x="-1147" y="-586">timelock2 &lt;= L2BridgeDetails.timelock</label>
		</location>
		<location id="id11" x="-161" y="-552">
			<name x="-238" y="-586">Relaying</name>
			<label kind="invariant" x="-153" y="-544">x &lt;= maxRelayerDelay</label>
			<label kind="comments" x="-323" y="-637">Relayer relating 
event</label>
		</location>
		<location id="id12" x="382" y="-552">
			<name x="340" y="-586">Completed</name>
			<label kind="comments" x="263" y="-637">L2 transfer completed</label>
		</location>
		<location id="id13" x="-578" y="-314">
			<name x="-613" y="-348">Aborted</name>
		</location>
		<location id="id14" x="-161" y="-816">
			<name x="-171" y="-850">RelayerDown</name>
		</location>
		<init ref="id10"/>
		<transition id="id15">
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="assignment" x="-153" y="-765">down = true</label>
		</transition>
		<transition id="id16">
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="guard" x="-518" y="-408">L2BridgeDetails.status == L2PENDING_TX &amp;&amp; 
timelock2 &gt;= L2BridgeDetails.timelock</label>
			<label kind="assignment" x="-365" y="-365">abort_bridge_transfer()</label>
			<nail x="-161" y="-314"/>
		</transition>
		<transition id="id17">
			<source ref="id10"/>
			<target ref="id13"/>
			<label kind="guard" x="-986" y="-399">L2BridgeDetails.status == L2PENDING_TX &amp;&amp; 
timelock2 &gt;= L2BridgeDetails.timelock</label>
			<label kind="assignment" x="-986" y="-357">abort_bridge_transfer()</label>
			<nail x="-1003" y="-314"/>
		</transition>
		<transition id="id18">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-51" y="-578">timelock1 &lt;= L1BridgeTransfer.timelock</label>
			<label kind="synchronisation" x="-42" y="-493">BridgeTransferCompleted[L1]!</label>
			<label kind="assignment" x="-42" y="-518">L1_complete_bridge_transfer()</label>
			<label kind="comments" x="-42" y="-671">Relayer relays and call 
complete on L1. Must be before 
the timelock expiration on L1.</label>
		</transition>
		<transition id="id19">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-731" y="-595">L2BridgeDetails.status == L2PENDING_TX &amp;&amp;
timelock2 &lt;= L2BridgeDetails.timelock</label>
			<label kind="synchronisation" x="-731" y="-501">BridgeTransferCompleted[L2]!</label>
			<label kind="assignment" x="-731" y="-544">L2_complete_bridge_transfer(),
x = 0</label>
			<label kind="comments" x="-697" y="-646">User requests funds on L2</label>
		</transition>
	</template>
	<template>
		<name>RefundTransferOnL1</name>
		<declaration>

clock x;

// Refund a transfer
void refund_bridge_transfer() {
    L1State.assetOwner = Alice;
}

/* AtomicBridgeInitiator.sol
 function refundBridgeTransfer(bytes32 bridgeTransferId) external onlyOwner {
        BridgeTransfer storage bridgeTransfer = bridgeTransfers[bridgeTransferId];
        if (bridgeTransfer.state != MessageState.INITIALIZED) revert BridgeTransferStateNotInitialized();
        if (block.timestamp &lt; bridgeTransfer.timeLock) revert TimeLockNotExpired();
        bridgeTransfer.state = MessageState.REFUNDED;
        
        // Decrease pool balance and transfer MOVE tokens back to the originator
        poolBalance -= bridgeTransfer.amount;
        if (!moveToken.transfer(bridgeTransfer.originator, bridgeTransfer.amount)) revert MOVETransferFailed();

        emit BridgeTransferRefunded(bridgeTransferId);
    }
*/</declaration>
		<location id="id20" x="-629" y="-178">
		</location>
		<location id="id21" x="17" y="-178">
			<name x="-17" y="-220">Refunded</name>
		</location>
		<init ref="id20"/>
		<transition id="id22">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-484" y="-229">L1BridgeTransfer.status == L1INITIALIZED &amp;&amp; 
timelock1 &gt;= L1BridgeTransfer.timelock</label>
			<label kind="assignment" x="-433" y="-170">refund_bridge_transfer()</label>
			<label kind="comments" x="-433" y="-263">User requests a refund</label>
		</transition>
	</template>
	<template>
		<name>FixedDurations</name>
		<parameter>int i, int j, int k</parameter>
		<location id="id23" x="-773" y="-272">
			<committed/>
		</location>
		<location id="id24" x="-255" y="-272">
		</location>
		<init ref="id23"/>
		<transition id="id25">
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="assignment" x="-620" y="-263">initiatorTimeLockDuration = i,
counterPartyTimeLock = j,
maxRelayerDelay = k</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Initiate = InitiateTransfer();
Complete = CompleteTransfer();
Refund = RefundTransferOnL1();
//SelectDurations = NonDetDurations();
SelectDurations = FixedDurations(48, 24, 10);
// List one or more processes to be composed into a system.
system Initiate, Complete, Refund, SelectDurations; 
</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula>E&lt;&gt; L2State.assetReceived</formula>
			<comment>safety-1
There exists path 
</comment>
			<result outcome="success" type="quality" timestamp="2024-11-06 15:24:53 +1100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; L2State.assetReceived &amp;&amp; L1State.assetOwner == Alice </formula>
			<comment>Is there a path where L2 user can get the minted asset, and the L1 user gets a refund on L1?</comment>
			<option key="--diagnostic" value="1"/>
			<result outcome="success" type="quality" timestamp="2024-11-06 12:38:39 +1100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; L2State.assetReceived &amp;&amp; L1State.assetOwner == Alice &amp;&amp; !down</formula>
			<comment>If relayer is not down, no duplication can occur</comment>
			<result outcome="failure" type="quality" timestamp="2024-11-06 12:38:42 +1100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; L2State.assetReceived</formula>
			<comment>Is there a path where a transfer is successful?</comment>
			<result outcome="success" type="quality" timestamp="2024-11-06 12:32:12 +1100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] ((time &gt; 24 &amp;&amp; !Refund.Refunded &amp;&amp; !Complete.Aborted) imply L2State.assetReceived)</formula>
			<comment>minimum time to of successful transfer</comment>
			<result outcome="success" type="quality" timestamp="2024-11-06 12:32:02 +1100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] !deadlock</formula>
			<comment>deadlocks</comment>
			<option key="--diagnostic" value="1"/>
			<result outcome="failure" type="quality" timestamp="2024-11-06 12:37:35 +1100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
	</queries>
</nta>
